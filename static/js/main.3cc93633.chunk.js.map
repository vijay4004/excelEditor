{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","initialData","setInitialData","currentSheet","setCurrentSheet","generatedObjects","setGeneratedObjects","className","type","accept","onChange","event","file","target","files","readFile","then","readedData","catch","error","console","id","style","display","htmlFor","justifyContent","alignItems","marginTop","onClick","document","getElementById","click","onSheetUpdate","activeSheetClassName","reactExcelClassName","result","generateObjects","length","cols","rows","value","JSON","stringify","readOnly","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+QA6EeA,EAxEH,WAAO,IAAD,EACsBC,wBAASC,GAD/B,mBACTC,EADS,KACIC,EADJ,OAEwBH,mBAAS,IAFjC,mBAETI,EAFS,KAEKC,EAFL,OAGgCL,mBAAS,IAHzC,mBAGTM,EAHS,KAGSC,EAHT,KAiBhB,OACE,sBAAKC,UAAU,MAAf,UACE,uBACEC,KAAK,OACLC,OAAO,QACPC,SAjBe,SAACC,GACpB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAChCC,YAASH,GACNI,MAAK,SAACC,GAAD,OAAgBf,EAAee,MACpCC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAc9BE,GAAG,SACHC,MAAO,CAAEC,QAAS,UAEpB,uBAAOC,QAAQ,SAAf,SACE,wBAAQjB,UAAU,gBAChBe,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZC,UAAW,QAEbC,QAAS,kBAAMC,SAASC,eAAe,UAAUC,SAPnD,uBAUF,cAAC,IAAD,CACE9B,YAAaA,EACb+B,cAAe,SAAC7B,GAAD,OAAkBC,EAAgBD,IACjD8B,qBAAqB,eACrBC,oBAAoB,gBAErBjC,GACC,wBAAQM,UAAU,gBAAgBqB,QAhCpB,WAClB,IAAMO,EAASC,YAAgBjC,GAC/BG,EAAoB6B,IA8BhB,uBAID9B,EAAiBgC,OAAS,GACzB,0BACEC,KAAM,GACNC,KAAM,GACNC,MAAOC,KAAKC,UAAUrC,EAAkB,KAAM,GAC9CsC,UAAQ,EACRpC,UAAU,YACVe,MAAO,CAAEC,QAAS,UAGtB,qBACED,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZC,UAAW,QALf,SAQC,cAAC,IAAD,CAAaiB,KAAMvC,UC3DXwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.3cc93633.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { ReactExcel, readFile, generateObjects } from '@ramonak/react-excel';\nimport CsvDownload from 'react-json-to-csv'\nimport './App.css';\n\nconst App = () => {\n  const [initialData, setInitialData] = useState(undefined);\n  const [currentSheet, setCurrentSheet] = useState({});\n  const [generatedObjects, setGeneratedObjects] = useState([]);\n\n  const handleUpload = (event) => {\n    const file = event.target.files[0];\n    readFile(file)\n      .then((readedData) => setInitialData(readedData))\n      .catch((error) => console.error(error));\n  };\n\n  const handleClick = () => {\n    const result = generateObjects(currentSheet);\n    setGeneratedObjects(result);\n  };\n\n  return (\n    <div className='App'>\n      <input\n        type='file'\n        accept='.xlsx'\n        onChange={handleUpload}\n        id='upload'\n        style={{ display: 'none' }}\n      />\n      <label htmlFor='upload'>\n        <button className='custom-button' \n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            marginTop: \"15px\",\n          }}\n          onClick={() => document.getElementById('upload').click()}> Upload\n        </button>\n      </label>\n      <ReactExcel\n        initialData={initialData}\n        onSheetUpdate={(currentSheet) => setCurrentSheet(currentSheet)}\n        activeSheetClassName='active-sheet'\n        reactExcelClassName='react-excel'\n      />\n      {initialData && (\n        <button className='custom-button' onClick={handleClick}>\n          Transform\n        </button>\n      )}\n      {generatedObjects.length > 0 && (\n        <textarea\n          cols={70}\n          rows={30}\n          value={JSON.stringify(generatedObjects, null, 2)}\n          readOnly\n          className='text-area'\n          style={{ display: 'none' }}\n        />\n      )}\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: \"15px\",\n        }}\n      >\n       <CsvDownload data={generatedObjects} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}